To do
----

1) Implement JSON schema based on draft 3 (fork) - change topics:

- 4.1 Review /schemas

- If it will not include my idea, fork the draft and add a property _"inherits"_ that solves these problems: http://groups.google.com/group/json-schema/browse_thread/thread/a863dd593c50d338

- 5.1 Union Types - it must be _clarified_ how to use (Does a combination of simple type, schema and URI make sense?) and to validate (Do I need to copy instances?) them.

- What about using URIs instead of schemas? It is better to only use referencing with $ref
_Discussion_: http://groups.google.com/group/json-schema/browse_thread/thread/95fb4006f1f92a40

- 5.3 "patternProperties"

- 5.4 "additionalProperties" now defaults to false.*

- 5.6 "additionalItems" now defaults to what? If false *

- 5.7 Replace "optional" by "required", that defaults to false.*

- 5.8 Replace "requires" by "dependencies".

- 5.11 Replace "maximumCanEqual" by "exclusiveMaximum"

- 5.12 Replace "minimumCanEqual" by "exclusiveMinimum"

- 5.15 "uniqueItems" and probably add support for complex types

- 5.24 "disallow" - Should always be validated strictly, if it is a schema.

- 6 Not planned to be implemented

- 6.2.1/2 together with "$ref" must be part of the core schema.

- 6.5 "default" must be part of the core schema

*) Criticism: Just to make flawed "extends" definition work ...


2) Better documentation of the basic concepts and the whole API, especially own properties like adapters ...

type, if tolerant cast does not work
	set default...
	add Error
optional, if !optional && value not defined
	set default...
	add Error
enum, if enum does not contain value
	set default...
	add Error
maxDecimal, if too many decimals
	round
	set default...
	add Error
minimum/maximum, if our of range
	set default/minimum/maximum...
	add Error
minLength, if too short
	set default...
	add Error
maxLength, if too long
	shorten
	set default...
	add Error
pattern, if value does not match
	set default...
	add Error
requires, if is string and property is missing
	set default... for property
	add Error
additionalProperties, if false and found
	remove
	add Error
minItems, if <
	add Error
maxItems, if >
	remove
	add Error


3) Make a distinction between JSON and implementation specific - in this case JavaScript - representation of a schema. JSON is the exchange format - the JavaScript implementation must be able to be reserialized to its original format - a simple JavaScript object.
Strategy is to add JavaScript specific properties as additonal properties (e.g. RegExp instead of a string, schemas untouched by "extends" and $ref objects ...


4) Be able to represent validation errors both as array (to get a simple list) and object tree that corresponds to the schema.
Avoid duplicate errors by using a hash instead of array.
!: You can throw the whole array or object as error


5) schema.js needs to support async adapters and plugins. Constraint checking against a persistence layer ...


6) Optimization: Check if property exists _before_ calling the checker (?)	


8) Separate schema and uses (validation, ...)
a) ... into single files
b) Put data that is not part of the standard into a sub-object that is used in a special context, like validation. Current examples: fallbacks, adapters, probably default, plugins


9) Simpler boolean fallbacks - accept ALL values


10) Complete i18n


11) Client side?


NPM